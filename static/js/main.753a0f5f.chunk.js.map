{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["drumBank","keyCode","keyTrigger","id","url","synthBank","PadButtons","props","handleButtonClick","bind","handleKeyPress","playSound","eventButtonTrigger","elementId","this","target","textContent","display","eventKeyTrigger","String","fromCharCode","document","getElementById","volume","soundValue","play","addEventListener","removeEventListener","audioBank","map","element","className","key","onClick","power","src","React","Component","App","displaySoundName","soundName","replace","powerOnOff","setState","state","audioBankToggle","checked","setSoundValue","value","style","color","type","min","max","onChange","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.753a0f5f.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nconst drumBank = [{\n  keyCode: 81,\n  keyTrigger: 'Q',\n  id: 'Heater-1',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\n}, {\n  keyCode: 87,\n  keyTrigger: 'W',\n  id: 'Heater-2',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\n}, {\n  keyCode: 69,\n  keyTrigger: 'E',\n  id: 'Heater-3',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\n}, {\n  keyCode: 65,\n  keyTrigger: 'A',\n  id: 'Heater-4',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\n}, {\n  keyCode: 83,\n  keyTrigger: 'S',\n  id: 'Clap',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\n}, {\n  keyCode: 68,\n  keyTrigger: 'D',\n  id: 'Open-HH',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n}, {\n  keyCode: 90,\n  keyTrigger: 'Z',\n  id: \"Kick-n'-Hat\",\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\n}, {\n  keyCode: 88,\n  keyTrigger: 'X',\n  id: 'Kick',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\n}, {\n  keyCode: 67,\n  keyTrigger: 'C',\n  id: 'Closed-HH',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n},\n];\n\nconst synthBank = [{\n  keyCode: 81,\n  keyTrigger: 'Q',\n  id: 'Chord-1',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3'\n}, {\n  keyCode: 87,\n  keyTrigger: 'W',\n  id: 'Chord-2',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3'\n}, {\n  keyCode: 69,\n  keyTrigger: 'E',\n  id: 'Chord-3',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3'\n}, {\n  keyCode: 65,\n  keyTrigger: 'A',\n  id: 'Shaker',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3'\n}, {\n  keyCode: 83,\n  keyTrigger: 'S',\n  id: 'Open-HH',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3'\n}, {\n  keyCode: 68,\n  keyTrigger: 'D',\n  id: 'Closed-HH',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\n}, {\n  keyCode: 90,\n  keyTrigger: 'Z',\n  id: 'Punchy-Kick',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3'\n}, {\n  keyCode: 88,\n  keyTrigger: 'X',\n  id: 'Side-Stick',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3'\n}, {\n  keyCode: 67,\n  keyTrigger: 'C',\n  id: 'Snare',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3'\n}];\n\nclass PadButtons extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleButtonClick = this.handleButtonClick.bind(this);\n    this.handleKeyPress    = this.handleKeyPress.bind(this);\n    this.playSound         = this.playSound.bind(this);\n  }\n\n  handleButtonClick(eventButtonTrigger, elementId) {\n    this.playSound(eventButtonTrigger.target.textContent);\n    this.props.display(elementId);\n  }\n\n  handleKeyPress(eventKeyTrigger) {\n    this.playSound(String.fromCharCode(eventKeyTrigger.keyCode));\n  }\n\n  playSound(elementId) {\n    document.getElementById(elementId).volume = this.props.soundValue;\n    document.getElementById(elementId).play();\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyPress);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyPress);\n  }\n\n  render() {\n    return (\n      <div id=\"padbutton-container\">\n      {\n          this.props.audioBank === 'drum' ?\n            drumBank.map((element) => {\n              return (\n                <div className=\"drum-pad\" id={element.id} key={element.id} onClick={this.props.power === true?(eventButtonTrigger)=>this.handleButtonClick(eventButtonTrigger, element.id):\"\"}>\n                  <audio src={element.url} className=\"clip\" id={element.keyTrigger}></audio>\n                  {element.keyTrigger}\n                </div>\n              );\n            }):\n            synthBank.map((element) => {\n              return (\n                <div className=\"drum-pad\" id={element.id} key={element.id} onClick={this.props.power === true?(eventButtonTrigger)=>this.handleButtonClick(eventButtonTrigger, element.id):\"\"}>\n                  <audio src={element.url} className=\"clip\" id={element.keyTrigger}></audio>\n                  {element.keyTrigger}\n                </div>\n              );\n            })\n      }\n      </div>\n    )\n  }\n}\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n       power: true,\n       display: String.fromCharCode(127),\n       soundValue: 0.5, \n       audioBank: 'drum'\n    }\n\n    this.displaySoundName = this.displaySoundName.bind(this);\n    this.powerOnOff       = this.powerOnOff.bind(this);\n    this.audioBankToggle  = this.audioBankToggle.bind(this);\n    this.setSoundValue    = this.setSoundValue.bind(this);\n  }\n\n  displaySoundName = (soundName) => {\n    document.getElementById(\"display\").textContent = soundName.replace(/-/g, ' ');\n  }\n\n  powerOnOff = () => {\n    this.setState({...this.state, power: !this.state.power});\n  }\n\n  audioBankToggle = () => {\n    if (this.state.power === true) {\n      if (this.state.audioBank === 'drum') {\n        this.setState({...this.state, audioBank:'synth'});\n        document.getElementById(\"checkbox-bank\").checked = true;  \n      } else {\n        this.setState({...this.state, audioBank:'drum'});\n        document.getElementById(\"checkbox-bank\").checked = false;  \n      }\n    }\n  }\n\n  setSoundValue = () => {\n    if (this.state.power === true)\n      this.setState({...this.state, soundValue: document.getElementById(\"sound-slider\").value / 100});\n  }\n  \n\n  render() {\n    const powerStyleOn = {\n      color: 'red'\n    }\n\n    const powerStyleOff = {\n      color: 'black'\n    }\n\n    return (\n        <div id=\"drum-machine\" className=\"inner-container\">\n          <div id=\"logo-header\"></div>\n          <div id=\"pad-container\">\n            <PadButtons \n              power={this.state.power}\n              display={this.displaySoundName}\n              soundValue={this.state.soundValue}\n              audioBank={this.state.audioBank} />\n          </div>\n          <div id=\"config-container\">\n            <div id=\"power-button\" onClick={this.powerOnOff}>\n              <span className=\"fas fa-power-off\" style={this.state.power===true ? powerStyleOn : powerStyleOff} ></span>\n            </div>\n            <div id=\"display\"></div>\n            <div id=\"sound-selector\">\n              <span className=\"fas fa-volume-off\"></span>\n              <input type=\"range\" min=\"1\" max=\"100\" value={this.state.soundValue*100} id=\"sound-slider\" onChange={this.setSoundValue}></input>\n              <span className=\"fas fa-volume-up\"></span>\n            </div>\n            <div id=\"bank-selector\" onClick={this.audioBankToggle}>\n              <input type=\"checkbox\" id=\"checkbox-bank\"></input>\n              <span className=\"bank-slider round\"></span>\n              <p id=\"bank-title\">Bank</p>\n            </div>\n          </div>\n        </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}